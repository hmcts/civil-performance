#!groovy

properties([
        pipelineTriggers([cron('H 08 * * 1-5')])
])

@Library("Infrastructure") _

def product = "civil"
def component = "ucmc-performance"
def fail = 0

def rerunOnFirstFail() {
    //def fails = 0
    //def stop = 0
    //def b = currentBuild.previousBuild

    //while (b != null && stop == 0) {
    //    if (b.result == 'FAILURE') {
    //        fails = fails + 1
    //    } else {
    //        stop = 1
    //    }
    //    b = b.previousBuild
    //}

    //fails = fails + 1
    //mail(
    //        to: 'yogesh.ruperai@hmcts.net',
    //        subject: "performanceTest Failed",
    //        body: "This is a test message"
            //body: "This test has failed ${fails} times this week"
    //)
    //slackSend(
    //        channel: 'yogesh.ruperai@hmcts.net',
    //        message: "This is a test message"
    //)
}

//echo "YR: Start Archive part 1"

withNightlyPipeline("java", product, component) {

    enablePerformanceTest()

    after('performanceTest') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-output/**/*'
    }

    afterFailure('performanceTest') {
        fail = 1
    }

}

if (fail = 1) {
    withNightlyPipeline("java", product, component) {
        enablePerformanceTest()
        after('performanceTest') {
            steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-output/**/*'
        }
    }
}


